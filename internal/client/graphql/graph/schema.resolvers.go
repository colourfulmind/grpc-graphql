package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"database/sql"
	"fmt"
	"log/slog"
	"ozon/internal/client/graphql/graph/model"
	"ozon/internal/storage/postgres"
	"ozon/protos/gen/go/comments"
	"ozon/protos/gen/go/posts"
	"ozon/protos/gen/go/sso"
	"time"

	_ "github.com/lib/pq"
	"google.golang.org/grpc"
)

func New(p postgres.Postgres, cc *grpc.ClientConn, log *slog.Logger) (*MutationResolverStruct, error) {
	const op = "internal/storage/graphql.New"

	conn := fmt.Sprintf("host=%s port=%d user=%s dbname=%s password=%s sslmode=%s",
		p.Host, p.Port, p.User, p.DBName, p.Password, p.SSLMode)

	db, err := sql.Open("postgres", conn)
	if err != nil {
		panic(err)
	}
	if err = db.Ping(); err != nil {
		panic(err)
	}

	return &MutationResolverStruct{
		&Resolver{
			SSO:      sso.NewSSOClient(cc),
			Posts:    posts.NewPostsClient(cc),
			Comments: comments.NewCommentsClient(cc),
			log:      log,
		},
	}, nil
}

// SaveUser is the resolver for the SaveUser field.
func (r *MutationResolverStruct) SaveUser(ctx context.Context, input model.RegisterRequest) (*model.RegisterResponse, error) {
	request := &sso.RegisterRequest{
		Email:    input.Email,
		Password: input.Password,
	}

	response, err := r.SSO.RegisterNewUser(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.RegisterResponse{
		UserID: int(response.UserId),
	}, nil
}

// Login is the resolver for the Login field.
func (r *MutationResolverStruct) Login(ctx context.Context, input model.LoginRequest) (*model.LoginResponse, error) {
	request := &sso.LoginRequest{
		Email:    input.Email,
		Password: input.Password,
	}

	response, err := r.SSO.Login(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.LoginResponse{
		Token: response.Token,
	}, nil
}

// SavePost is the resolver for the SavePost field.
func (r *MutationResolverStruct) SavePost(ctx context.Context, input model.NewPostRequest) (*model.NewPostResponse, error) {
	request := &posts.NewPostRequest{
		Token:    input.Token,
		Title:    input.Title,
		Content:  input.Content,
		Comments: input.Comments,
	}

	response, err := r.Posts.PostNew(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.NewPostResponse{
		PostID:    int(response.Id),
		CreatedAt: response.CreatedAt.AsTime().Format(time.RFC3339),
	}, nil
}

// ProvidePost is the resolver for the ProvidePost field.
func (r *MutationResolverStruct) ProvidePost(ctx context.Context, input model.ProvidePostRequest) (*model.ProvidePostResponse, error) {
	request := &posts.GetPostByIDRequest{
		Id: int64(input.PostID),
	}

	response, err := r.Posts.GetPostByID(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.ProvidePostResponse{
		ID:        int(response.Id),
		UserID:    int(response.UserId),
		Title:     response.Title,
		Content:   response.Content,
		CreatedAt: response.CreatedAt.AsTime().Format(time.RFC3339),
		Comments:  response.Comments,
	}, nil
}

// ProvideAllPosts is the resolver for the ProvideAllPosts field.
func (r *MutationResolverStruct) ProvideAllPosts(ctx context.Context, input model.ProvideAllPostsRequest) (*model.ProvideAllPostsResponse, error) {
	request := &posts.GetAllPostsRequest{
		Page: int64(input.Page),
	}

	response, err := r.Posts.GetAllPosts(ctx, request)
	if err != nil {
		return nil, err
	}

	var respPosts []*model.ProvidePostResponse
	for _, post := range response.Posts {
		respPosts = append(respPosts, &model.ProvidePostResponse{
			ID:        int(post.Id),
			UserID:    int(post.UserId),
			Title:     post.Title,
			Content:   post.Content,
			CreatedAt: post.CreatedAt.AsTime().Format(time.RFC3339),
			Comments:  post.Comments,
		})
	}

	return &model.ProvideAllPostsResponse{
		Posts: respPosts,
	}, nil
}

// SaveComment is the resolver for the SaveComment field.
func (r *MutationResolverStruct) SaveComment(ctx context.Context, input model.SaveCommentRequest) (*model.SaveCommentResponse, error) {
	request := &comments.NewCommentRequest{
		Token:   input.Token,
		PostId:  int64(input.PostID),
		Content: input.Content,
	}

	response, err := r.Comments.PostNewComment(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.SaveCommentResponse{
		ID:        int(response.Id),
		CreatedAt: response.Created.AsTime().Format(time.RFC3339),
	}, nil
}

// SaveCommentToComment is the resolver for the SaveCommentToComment field.
func (r *MutationResolverStruct) SaveCommentToComment(ctx context.Context, input model.SaveCommentToCommentRequest) (*model.SaveCommentResponse, error) {
	request := &comments.PostCommentRequest{
		Token:    input.Token,
		PostId:   int64(input.PostID),
		ParentId: int64(input.ParentID),
		Content:  input.Content,
	}

	response, err := r.Comments.PostCommentToComment(ctx, request)
	if err != nil {
		return nil, err
	}

	return &model.SaveCommentResponse{
		ID:        int(response.Id),
		CreatedAt: response.Created.AsTime().Format(time.RFC3339),
	}, nil
}

// ProvideComment is the resolver for the ProvideComment field.
func (r *MutationResolverStruct) ProvideComment(ctx context.Context, input model.ProvideCommentRequest) (*model.ProvideCommentResponse, error) {
	request := &comments.CommentsRequest{
		PostId:   int64(input.PostID),
		ParentId: int64(input.ParentID),
	}

	response, err := r.Comments.GetComments(ctx, request)
	if err != nil {
		return nil, err
	}

	var respComments []*model.Comment
	for _, comment := range response.Comments {
		respComments = append(respComments, &model.Comment{
			ID:        int(comment.Id),
			UserID:    int(comment.UserId),
			PostID:    int(comment.PostId),
			Content:   comment.Content,
			CreatedAt: comment.CreatedAt.AsTime().Format(time.RFC3339),
			ParentID:  int(comment.ParentId),
		})
	}

	return &model.ProvideCommentResponse{
		Comments: respComments,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &MutationResolverStruct{r} }

type MutationResolverStruct struct{ *Resolver }
